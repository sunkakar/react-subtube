{"version":3,"sources":["components/header.js","components/content.js","components/google-auth.js","App.js","serviceWorker.js","index.js"],"names":["onClickSubtube","e","alert","HeaderComp","react_default","a","createElement","Segment","clearing","Header","as","floated","textAlign","onClick","React","Component","Content","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleGoogleAuth","setState","value","state","Container","className","Button","Group","color","bind","Or","responseGoogle","response","console","log","GoogleAuth","google_login_default","clientId","buttonText","onSuccess","onFailure","App","header","google_auth","content","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6SAGMA,EAAiB,SAACC,GAAOC,MAAM,eAiBtBC,mLAbP,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASC,UAAQ,GACbJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQC,GAAG,KAAKC,QAAQ,QAAQC,UAAU,UAA1C,wCAGAR,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQI,QAASb,EAAgBU,GAAG,KAAKC,QAAQ,QAAjD,mBAPSG,IAAMC,oBCqChBC,cAzBX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMVQ,iBAAmB,WACfP,EAAKQ,SAAS,CAACC,MAAOT,EAAKU,MAAMD,MAAQ,WANzCT,EAAKU,MAAQ,CACGD,MAAO,YAHTT,wEAYd,OACId,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAWC,UAAU,kBAAkBlB,UAAU,UAC7CR,EAAAC,EAAAC,cAAA,SAAIe,KAAKO,MAAMD,OACfvB,EAAAC,EAAAC,cAACyB,EAAA,EAAOC,MAAR,KACI5B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAQE,MAAM,UAAUpB,QAASQ,KAAKI,iBAAiBS,KAAKb,OAA5D,qBACIjB,EAAAC,EAAAC,cAACyB,EAAA,EAAOI,GAAR,MACJ/B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,+BAnBEjB,IAAMC,6BCVtBqB,EAAiB,SAACC,GAEtBC,QAAQC,IAAIF,IAmBCG,mLAXX,OACEpC,EAAAC,EAAAC,cAACmC,EAAApC,EAAD,CACAqC,SAAS,2EACTC,WAAW,QACXC,UAAWR,EACXS,UAAWT,WAVQtB,IAAMC,WCQhB+B,mLAVX,OACE1C,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KACEzB,EAAAC,EAAAC,cAACyC,EAAD,MACA3C,EAAAC,EAAAC,cAAC0C,EAAD,MACA5C,EAAAC,EAAAC,cAAC2C,EAAD,cANUlC,aCKEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.589627dc.chunk.js","sourcesContent":["import React from \"react\";\nimport { Header, Segment } from 'semantic-ui-react';\n\nconst onClickSubtube = (e) => {alert(\"Alert Test\");}\n\nclass HeaderComp extends React.Component{\n    render(){\n        return (\n            <Segment clearing>\n                <Header as='h5' floated='right' textAlign=\"center\">\n                    Youtube Clone for only subscribtions\n                </Header>\n                <Header onClick={onClickSubtube} as='h2' floated='left'>\n                    SubTUBE\n                </Header>\n            </Segment>\n        );\n    }\n}\n\nexport default HeaderComp;","import React from \"react\";\nimport { Container } from 'semantic-ui-react';\nimport { Button } from 'semantic-ui-react';\n\n// Google oauth button\n\n// async function handleGoogleAuth() {\n//     const client = await auth.getClient({\n//       scopes: 'https://www.googleapis.com/auth/cloud-platform'\n//     });\n//     const projectId = await auth.getProjectId();\n//     const url = `https://www.googleapis.com/dns/v1/projects/${projectId}`;\n//     const res = await client.request({ url });\n//     console.log(res.data);\n//   }\n\nclass Content extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n                        value: 'NO Value'\n                    };\n    }\n\n    handleGoogleAuth = () => {\n        this.setState({value: this.state.value + 'Found'})\n    }\n\n    render(){\n        return (\n            <Container className=\"video-container\" textAlign=\"center\">\n                <p>{this.state.value}</p>\n                <Button.Group>\n                    <Button color=\"youtube\" onClick={this.handleGoogleAuth.bind(this)}>Connect to Google</Button>\n                        <Button.Or />\n                    <Button>No, Thank You</Button>\n                </Button.Group>\n            </Container>\n        );\n    }\n}\n\nexport default Content;","import React from 'react';\nimport GoogleLogin from 'react-google-login';\n// or\n//import { GoogleLogin } from 'react-google-login';\n \n \nconst responseGoogle = (response) => \n{\n  console.log(response);\n}\n\nclass GoogleAuth extends React.Component\n{\n\n  render()\n  {\n    return(\n      <GoogleLogin\n      clientId=\"658977310896-knrl3gka66fldh83dao2rhgbblmd4un9.apps.googleusercontent.com\"\n      buttonText=\"Login\"\n      onSuccess={responseGoogle}\n      onFailure={responseGoogle}\n      />\n    );\n  }\n}  \n\nexport default GoogleAuth;","import React, { Component } from 'react';\nimport './App.css';\nimport { Container } from 'semantic-ui-react';\nimport Header from \"./components/header.js\";\nimport Content from \"./components/content\";\nimport GoogleAuth from \"./components/google-auth\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Container>\n        <Header />\n        <GoogleAuth />\n        <Content />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport GoogleLogin from 'react-google-login';\nconst responseGoogle = (response) => {\n    console.log(response);\n  }\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}