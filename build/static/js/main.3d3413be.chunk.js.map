{"version":3,"sources":["components/header.js","components/content.js","components/google-auth.js","App.js","serviceWorker.js","index.js"],"names":["onClickSubtube","e","alert","HeaderComp","react_default","a","createElement","Segment","clearing","Header","as","floated","textAlign","onClick","React","Component","Content","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleGoogleAuth","setState","value","state","Container","className","Button","Group","color","bind","Or","GoogleAuth","App","header","google_auth","content","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6SAGMA,EAAiB,SAACC,GAAOC,MAAM,eAiBtBC,mLAbP,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASC,UAAQ,GACbJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQC,GAAG,KAAKC,QAAQ,QAAQC,UAAU,UAA1C,wCAGAR,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQI,QAASb,EAAgBU,GAAG,KAAKC,QAAQ,QAAjD,mBAPSG,IAAMC,oBCqChBC,cAzBX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMVQ,iBAAmB,WACfP,EAAKQ,SAAS,CAACC,MAAOT,EAAKU,MAAMD,MAAQ,WANzCT,EAAKU,MAAQ,CACGD,MAAO,YAHTT,wEAYd,OACId,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAWC,UAAU,kBAAkBlB,UAAU,UAC7CR,EAAAC,EAAAC,cAAA,SAAIe,KAAKO,MAAMD,OACfvB,EAAAC,EAAAC,cAACyB,EAAA,EAAOC,MAAR,KACI5B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAQE,MAAM,UAAUpB,QAASQ,KAAKI,iBAAiBS,KAAKb,OAA5D,qBACIjB,EAAAC,EAAAC,cAACyB,EAAA,EAAOI,GAAR,MACJ/B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,+BAnBEjB,IAAMC,WCYbqB,mLAZX,OAOEhC,EAAAC,EAAAC,cAAA,0BAZmBQ,IAAMC,WCQhBsB,mLAVX,OACEjC,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KACEzB,EAAAC,EAAAC,cAACgC,EAAD,MACAlC,EAAAC,EAAAC,cAACiC,EAAD,MACAnC,EAAAC,EAAAC,cAACkC,EAAD,cANUzB,aCKE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3d3413be.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Header, Segment } from 'semantic-ui-react';\r\n\r\nconst onClickSubtube = (e) => {alert(\"Alert Test\");}\r\n\r\nclass HeaderComp extends React.Component{\r\n    render(){\r\n        return (\r\n            <Segment clearing>\r\n                <Header as='h5' floated='right' textAlign=\"center\">\r\n                    Youtube Clone for only subscribtions\r\n                </Header>\r\n                <Header onClick={onClickSubtube} as='h2' floated='left'>\r\n                    SubTUBE\r\n                </Header>\r\n            </Segment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HeaderComp;","import React from \"react\";\r\nimport { Container } from 'semantic-ui-react';\r\nimport { Button } from 'semantic-ui-react';\r\n\r\n// Google oauth button\r\n\r\n// async function handleGoogleAuth() {\r\n//     const client = await auth.getClient({\r\n//       scopes: 'https://www.googleapis.com/auth/cloud-platform'\r\n//     });\r\n//     const projectId = await auth.getProjectId();\r\n//     const url = `https://www.googleapis.com/dns/v1/projects/${projectId}`;\r\n//     const res = await client.request({ url });\r\n//     console.log(res.data);\r\n//   }\r\n\r\nclass Content extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n                        value: 'NO Value'\r\n                    };\r\n    }\r\n\r\n    handleGoogleAuth = () => {\r\n        this.setState({value: this.state.value + 'Found'})\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <Container className=\"video-container\" textAlign=\"center\">\r\n                <p>{this.state.value}</p>\r\n                <Button.Group>\r\n                    <Button color=\"youtube\" onClick={this.handleGoogleAuth.bind(this)}>Connect to Google</Button>\r\n                        <Button.Or />\r\n                    <Button>No, Thank You</Button>\r\n                </Button.Group>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Content;","import React from 'react';\r\n//import GoogleLogin from 'react-google-login';\r\n// or\r\n//import { GoogleLogin } from 'react-google-login';\r\n \r\n \r\n// const responseGoogle = (response) => \r\n// {\r\n//   console.log(response);\r\n// }\r\n\r\nclass GoogleAuth extends React.Component\r\n{\r\n\r\n  render()\r\n  {\r\n    return(\r\n      // <GoogleLogin\r\n      // clientId=\"658977310896-knrl3gka66fldh83dao2rhgbblmd4un9.apps.googleusercontent.com\"\r\n      // buttonText=\"Login\"\r\n      // onSuccess={responseGoogle}\r\n      // onFailure={responseGoogle}\r\n      // />\r\n      <h1>Hello</h1>\r\n    );\r\n  }\r\n}  \r\n\r\nexport default GoogleAuth;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Container } from 'semantic-ui-react';\r\nimport Header from \"./components/header.js\";\r\nimport Content from \"./components/content\";\r\nimport GoogleAuth from \"./components/google-auth\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Header />\r\n        <GoogleAuth />\r\n        <Content />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}