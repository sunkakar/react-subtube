{"map":"{\"version\":3,\"sources\":[\"/home/sunnyd/Desktop/Weather App/subtube/src/components/header.js\",\"/home/sunnyd/Desktop/Weather App/subtube/src/components/content.js\",\"/home/sunnyd/Desktop/Weather App/subtube/src/App.js\",\"/home/sunnyd/Desktop/Weather App/subtube/src/serviceWorker.js\",\"/home/sunnyd/Desktop/Weather App/subtube/src/index.js\"],\"names\":[\"onClickSubtube\",\"e\",\"alert\",\"HeaderComp\",\"react_default\",\"a\",\"createElement\",\"Segment\",\"clearing\",\"Header\",\"as\",\"floated\",\"textAlign\",\"onClick\",\"React\",\"Component\",\"Content\",\"props\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"handleGoogleAuth\",\"setState\",\"value\",\"state\",\"Container\",\"className\",\"Button\",\"Group\",\"color\",\"bind\",\"Or\",\"App\",\"header\",\"content\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"responseGoogle\",\"response\",\"console\",\"log\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"google_login_default\",\"clientId\",\"renderProps\",\"buttonText\",\"onSuccess\",\"onFailure\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"6SAGMA,EAAiB,SAACC,GAAOC,MAAM,eAiBtBC,mLAbP,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASC,UAAQ,GACbJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQC,GAAG,KAAKC,QAAQ,QAAQC,UAAU,UAA1C,wCAGAR,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQI,QAASb,EAAgBU,GAAG,KAAKC,QAAQ,QAAjD,mBAPSG,EAAAA,EAAMC,oBCqChBC,cAzBX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMVQ,iBAAmB,WACfP,EAAKQ,SAAS,CAACC,MAAOT,EAAKU,MAAMD,MAAQ,WANzCT,EAAKU,MAAQ,CACGD,MAAO,YAHTT,wEAYd,OACId,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAWC,UAAU,kBAAkBlB,UAAU,UAC7CR,EAAAC,EAAAC,cAAA,IAAA,KAAIe,KAAKO,MAAMD,OACfvB,EAAAC,EAAAC,cAACyB,EAAA,EAAOC,MAAR,KACI5B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAQE,MAAM,UAAUpB,QAASQ,KAAKI,iBAAiBS,KAAKb,OAA5D,qBACIjB,EAAAC,EAAAC,cAACyB,EAAA,EAAOI,GAAR,MACJ/B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,KAAA,0BAnBEjB,EAAAA,EAAMC,WCEbqB,mLATX,OACEhC,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KACEzB,EAAAC,EAAAC,cAAC+B,EAAD,MACAjC,EAAAC,EAAAC,cAACgC,EAAD,cALUvB,EAAAA,WCKEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iFCZAC,EAAiB,SAACC,GACpBC,QAAQC,IAAIF,IAGhBG,EAAAA,EAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SACjDJ,EAAAA,EAASC,OACL7C,EAAAC,EAAAC,cAAC+C,EAAAhD,EAAD,CACEiD,SAAS,2EACTL,OAAQ,SAAAM,GAAW,OACjBnD,EAAAC,EAAAC,cAAA,SAAA,CAAQO,QAAS0C,EAAY1C,SAA7B,oCAEF2C,WAAW,QACXC,UAAWb,EACXc,UAAWd,IAEbO,SAASC,eAAe,iBD4GtB,kBAAmBO,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React from \\\"react\\\";\\nimport { Header, Segment } from 'semantic-ui-react';\\n\\nconst onClickSubtube = (e) => {alert(\\\"Alert Test\\\");}\\n\\nclass HeaderComp extends React.Component{\\n    render(){\\n        return (\\n            <Segment clearing>\\n                <Header as='h5' floated='right' textAlign=\\\"center\\\">\\n                    Youtube Clone for only subscribtions\\n                </Header>\\n                <Header onClick={onClickSubtube} as='h2' floated='left'>\\n                    SubTUBE\\n                </Header>\\n            </Segment>\\n        );\\n    }\\n}\\n\\nexport default HeaderComp;\",\"import React from \\\"react\\\";\\nimport { Container } from 'semantic-ui-react';\\nimport { Button } from 'semantic-ui-react';\\n\\n// Google oauth button\\n\\n// async function handleGoogleAuth() {\\n//     const client = await auth.getClient({\\n//       scopes: 'https://www.googleapis.com/auth/cloud-platform'\\n//     });\\n//     const projectId = await auth.getProjectId();\\n//     const url = `https://www.googleapis.com/dns/v1/projects/${projectId}`;\\n//     const res = await client.request({ url });\\n//     console.log(res.data);\\n//   }\\n\\nclass Content extends React.Component{\\n    constructor(props){\\n        super(props);\\n        this.state = {\\n                        value: 'NO Value'\\n                    };\\n    }\\n\\n    handleGoogleAuth = () => {\\n        this.setState({value: this.state.value + 'Found'})\\n    }\\n\\n    render(){\\n        return (\\n            <Container className=\\\"video-container\\\" textAlign=\\\"center\\\">\\n                <p>{this.state.value}</p>\\n                <Button.Group>\\n                    <Button color=\\\"youtube\\\" onClick={this.handleGoogleAuth.bind(this)}>Connect to Google</Button>\\n                        <Button.Or />\\n                    <Button>No, Thank You</Button>\\n                </Button.Group>\\n            </Container>\\n        );\\n    }\\n}\\n\\nexport default Content;\",\"import React, { Component } from 'react';\\nimport './App.css';\\nimport { Container } from 'semantic-ui-react';\\nimport Header from \\\"./components/header.js\\\";\\nimport Content from \\\"./components/content\\\";\\n\\n\\nclass App extends Component {\\n  render() {\\n    return (\\n      <Container>\\n        <Header />\\n        <Content />\\n      </Container>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\nimport GoogleLogin from 'react-google-login';\\nconst responseGoogle = (response) => {\\n    console.log(response);\\n  }\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\nReactDOM.render(\\n    <GoogleLogin\\n      clientId=\\\"786175337282-2o429fqsco57e1ciro8gaodpv3f0l0pl.apps.googleusercontent.com\\\"\\n      render={renderProps => (\\n        <button onClick={renderProps.onClick}>This is my custom Google button</button>\\n      )}\\n      buttonText=\\\"Login\\\"\\n      onSuccess={responseGoogle}\\n      onFailure={responseGoogle}\\n    />,\\n    document.getElementById('googleButton')\\n  );\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{131:function(e,t,n){e.exports=n(260)},136:function(e,t,n){},138:function(e,t,n){},260:function(e,t,n){\"use strict\";n.r(t);var a=n(0),o=n.n(a),c=n(26),l=n.n(c),r=(n(136),n(28)),u=n(29),i=n(31),s=n(30),m=n(32),h=(n(138),n(265)),b=n(267),d=n(268),f=function(e){alert(\"Alert Test\")},g=function(e){function t(){return Object(r.a)(this,t),Object(i.a)(this,Object(s.a)(t).apply(this,arguments))}return Object(m.a)(t,e),Object(u.a)(t,[{key:\"render\",value:function(){return o.a.createElement(b.a,{clearing:!0},o.a.createElement(d.a,{as:\"h5\",floated:\"right\",textAlign:\"center\"},\"Youtube Clone for only subscribtions\"),o.a.createElement(d.a,{onClick:f,as:\"h2\",floated:\"left\"},\"SubTUBE\"))}}]),t}(o.a.Component),p=n(266),E=function(e){function t(e){var n;return Object(r.a)(this,t),(n=Object(i.a)(this,Object(s.a)(t).call(this,e))).handleGoogleAuth=function(){n.setState({value:n.state.value+\"Found\"})},n.state={value:\"NO Value\"},n}return Object(m.a)(t,e),Object(u.a)(t,[{key:\"render\",value:function(){return o.a.createElement(h.a,{className:\"video-container\",textAlign:\"center\"},o.a.createElement(\"p\",null,this.state.value),o.a.createElement(p.a.Group,null,o.a.createElement(p.a,{color:\"youtube\",onClick:this.handleGoogleAuth.bind(this)},\"Connect to Google\"),o.a.createElement(p.a.Or,null),o.a.createElement(p.a,null,\"No, Thank You\")))}}]),t}(o.a.Component),O=function(e){function t(){return Object(r.a)(this,t),Object(i.a)(this,Object(s.a)(t).apply(this,arguments))}return Object(m.a)(t,e),Object(u.a)(t,[{key:\"render\",value:function(){return o.a.createElement(h.a,null,o.a.createElement(g,null),o.a.createElement(E,null))}}]),t}(a.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));var v=n(122),j=n.n(v),k=function(e){console.log(e)};l.a.render(o.a.createElement(O,null),document.getElementById(\"root\")),l.a.render(o.a.createElement(j.a,{clientId:\"786175337282-2o429fqsco57e1ciro8gaodpv3f0l0pl.apps.googleusercontent.com\",render:function(e){return o.a.createElement(\"button\",{onClick:e.onClick},\"This is my custom Google button\")},buttonText:\"Login\",onSuccess:k,onFailure:k}),document.getElementById(\"googleButton\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[131,2,1]]]);","extractedComments":[]}