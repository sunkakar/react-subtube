{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\n\nvar _regeneratorRuntime = require(\"/home/sunnyd/Desktop/Weather App/subtube/node_modules/@babel/runtime/regenerator\");\n\nvar _createClass = require(\"/home/sunnyd/Desktop/Weather App/subtube/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/home/sunnyd/Desktop/Weather App/subtube/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _possibleConstructorReturn = require(\"/home/sunnyd/Desktop/Weather App/subtube/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/sunnyd/Desktop/Weather App/subtube/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/sunnyd/Desktop/Weather App/subtube/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _wrapNativeSuper = require(\"/home/sunnyd/Desktop/Weather App/subtube/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar fs = require(\"fs\");\n\nvar gaxios_1 = require(\"gaxios\");\n\nvar jws = require(\"jws\");\n\nvar mime = require(\"mime\");\n\nvar pify = require(\"pify\");\n\nvar readFile = pify(fs.readFile);\nvar GOOGLE_TOKEN_URL = 'https://www.googleapis.com/oauth2/v4/token';\nvar GOOGLE_REVOKE_TOKEN_URL = 'https://accounts.google.com/o/oauth2/revoke?token=';\n\nvar ErrorWithCode =\n/*#__PURE__*/\nfunction (_Error) {\n  _inherits(ErrorWithCode, _Error);\n\n  function ErrorWithCode(message, code) {\n    var _this;\n\n    _classCallCheck(this, ErrorWithCode);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ErrorWithCode).call(this, message));\n    _this.code = code;\n    return _this;\n  }\n\n  return ErrorWithCode;\n}(_wrapNativeSuper(Error));\n\nvar getPem;\n\nvar GoogleToken =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Create a GoogleToken.\n   *\n   * @param options  Configuration object.\n   */\n  function GoogleToken(options) {\n    _classCallCheck(this, GoogleToken);\n\n    this.token = null;\n    this.expiresAt = null;\n    this.rawToken = null;\n    this.tokenExpires = null;\n    this.configure(options);\n  }\n  /**\n   * Returns whether the token has expired.\n   *\n   * @return true if the token has expired, false otherwise.\n   */\n\n\n  _createClass(GoogleToken, [{\n    key: \"hasExpired\",\n    value: function hasExpired() {\n      var now = new Date().getTime();\n\n      if (this.token && this.expiresAt) {\n        return now >= this.expiresAt;\n      } else {\n        return true;\n      }\n    }\n  }, {\n    key: \"getToken\",\n    value: function getToken(callback) {\n      if (callback) {\n        this.getTokenAsync().then(function (t) {\n          return callback(null, t);\n        }, callback);\n        return;\n      }\n\n      return this.getTokenAsync();\n    }\n    /**\n     * Given a keyFile, extract the key and client email if available\n     * @param keyFile Path to a json, pem, or p12 file that contains the key.\n     * @returns an object with privateKey and clientEmail properties\n     */\n\n  }, {\n    key: \"getCredentials\",\n    value: function getCredentials(keyFile) {\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var mimeType, key, body, privateKey, clientEmail, _privateKey, _privateKey2;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                mimeType = mime.getType(keyFile);\n                _context.t0 = mimeType;\n                _context.next = _context.t0 === 'application/json' ? 4 : _context.t0 === 'application/x-x509-ca-cert' ? 13 : _context.t0 === 'application/x-pkcs12' ? 17 : 25;\n                break;\n\n              case 4:\n                _context.next = 6;\n                return readFile(keyFile, 'utf8');\n\n              case 6:\n                key = _context.sent;\n                body = JSON.parse(key);\n                privateKey = body.private_key;\n                clientEmail = body.client_email;\n\n                if (!(!privateKey || !clientEmail)) {\n                  _context.next = 12;\n                  break;\n                }\n\n                throw new ErrorWithCode('private_key and client_email are required.', 'MISSING_CREDENTIALS');\n\n              case 12:\n                return _context.abrupt(\"return\", {\n                  privateKey: privateKey,\n                  clientEmail: clientEmail\n                });\n\n              case 13:\n                _context.next = 15;\n                return readFile(keyFile, 'utf8');\n\n              case 15:\n                _privateKey = _context.sent;\n                return _context.abrupt(\"return\", {\n                  privateKey: _privateKey\n                });\n\n              case 17:\n                if (getPem) {\n                  _context.next = 21;\n                  break;\n                }\n\n                _context.next = 20;\n                return Promise.resolve().then(function () {\n                  return require('google-p12-pem');\n                });\n\n              case 20:\n                getPem = _context.sent.getPem;\n\n              case 21:\n                _context.next = 23;\n                return getPem(keyFile);\n\n              case 23:\n                _privateKey2 = _context.sent;\n                return _context.abrupt(\"return\", {\n                  privateKey: _privateKey2\n                });\n\n              case 25:\n                throw new ErrorWithCode('Unknown certificate type. Type is determined based on file extension. ' + 'Current supported extensions are *.json, *.pem, and *.p12.', 'UNKNOWN_CERTIFICATE_TYPE');\n\n              case 26:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"getTokenAsync\",\n    value: function getTokenAsync() {\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var creds;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.hasExpired()) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", Promise.resolve(this.token));\n\n              case 2:\n                if (!(!this.key && !this.keyFile)) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                throw new Error('No key or keyFile set.');\n\n              case 4:\n                if (!(!this.key && this.keyFile)) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                _context2.next = 7;\n                return this.getCredentials(this.keyFile);\n\n              case 7:\n                creds = _context2.sent;\n                this.key = creds.privateKey;\n                this.iss = creds.clientEmail || this.iss;\n\n                if (!creds.clientEmail) {\n                  this.ensureEmail();\n                }\n\n              case 11:\n                return _context2.abrupt(\"return\", this.requestToken());\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"ensureEmail\",\n    value: function ensureEmail() {\n      if (!this.iss) {\n        throw new ErrorWithCode('email is required.', 'MISSING_CREDENTIALS');\n      }\n    }\n  }, {\n    key: \"revokeToken\",\n    value: function revokeToken(callback) {\n      if (callback) {\n        this.revokeTokenAsync().then(function () {\n          return callback();\n        }, callback);\n        return;\n      }\n\n      return this.revokeTokenAsync();\n    }\n  }, {\n    key: \"revokeTokenAsync\",\n    value: function revokeTokenAsync() {\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (this.token) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw new Error('No token to revoke.');\n\n              case 2:\n                return _context3.abrupt(\"return\", gaxios_1.request({\n                  url: GOOGLE_REVOKE_TOKEN_URL + this.token\n                }).then(function (r) {\n                  _this2.configure({\n                    email: _this2.iss,\n                    sub: _this2.sub,\n                    key: _this2.key,\n                    keyFile: _this2.keyFile,\n                    scope: _this2.scope,\n                    additionalClaims: _this2.additionalClaims\n                  });\n                }));\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n    /**\n     * Configure the GoogleToken for re-use.\n     * @param  {object} options Configuration object.\n     */\n\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.keyFile = options.keyFile;\n      this.key = options.key;\n      this.token = this.expiresAt = this.rawToken = null;\n      this.iss = options.email || options.iss;\n      this.sub = options.sub;\n      this.additionalClaims = options.additionalClaims;\n\n      if (typeof options.scope === 'object') {\n        this.scope = options.scope.join(' ');\n      } else {\n        this.scope = options.scope;\n      }\n    }\n    /**\n     * Request the token from Google.\n     */\n\n  }, {\n    key: \"requestToken\",\n    value: function requestToken() {\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var _this3 = this;\n\n        var iat, additionalClaims, payload, signedJWT;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                iat = Math.floor(new Date().getTime() / 1000);\n                additionalClaims = this.additionalClaims || {};\n                payload = Object.assign({\n                  iss: this.iss,\n                  scope: this.scope,\n                  aud: GOOGLE_TOKEN_URL,\n                  exp: iat + 3600,\n                  iat: iat,\n                  sub: this.sub\n                }, additionalClaims);\n                signedJWT = jws.sign({\n                  header: {\n                    alg: 'RS256'\n                  },\n                  payload: payload,\n                  secret: this.key\n                });\n                return _context4.abrupt(\"return\", gaxios_1.request({\n                  method: 'POST',\n                  url: GOOGLE_TOKEN_URL,\n                  data: {\n                    grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n                    assertion: signedJWT\n                  },\n                  headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                  },\n                  responseType: 'json'\n                }).then(function (r) {\n                  _this3.rawToken = r.data;\n                  _this3.token = r.data.access_token;\n                  _this3.expiresAt = r.data.expires_in === null || r.data.expires_in === undefined ? null : (iat + r.data.expires_in) * 1000;\n                  return _this3.token;\n                }).catch(function (e) {\n                  _this3.token = null;\n                  _this3.tokenExpires = null;\n                  var body = e.response && e.response.data ? e.response.data : {};\n                  var err = e;\n\n                  if (body.error) {\n                    var desc = body.error_description ? \": \".concat(body.error_description) : '';\n                    err = new Error(\"\".concat(body.error).concat(desc));\n                  }\n\n                  throw err;\n                }));\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }]);\n\n  return GoogleToken;\n}();\n\nexports.GoogleToken = GoogleToken;","map":null,"metadata":{},"sourceType":"script"}