{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2013 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _regeneratorRuntime = require(\"/home/sunnyd/Desktop/Weather App/subtube/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/home/sunnyd/Desktop/Weather App/subtube/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/sunnyd/Desktop/Weather App/subtube/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/sunnyd/Desktop/Weather App/subtube/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/sunnyd/Desktop/Weather App/subtube/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/home/sunnyd/Desktop/Weather App/subtube/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/home/sunnyd/Desktop/Weather App/subtube/node_modules/@babel/runtime/helpers/inherits\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar gcpMetadata = require(\"gcp-metadata\");\n\nvar messages = require(\"../messages\");\n\nvar oauth2client_1 = require(\"./oauth2client\");\n\nvar Compute =\n/*#__PURE__*/\nfunction (_oauth2client_1$OAuth) {\n  _inherits(Compute, _oauth2client_1$OAuth);\n\n  /**\n   * Google Compute Engine service account credentials.\n   *\n   * Retrieve access token from the metadata server.\n   * See: https://developers.google.com/compute/docs/authentication\n   */\n  function Compute() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Compute);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Compute).call(this, options)); // Start with an expired refresh token, which will automatically be\n    // refreshed before the first API call is made.\n\n    _this.credentials = {\n      expiry_date: 1,\n      refresh_token: 'compute-placeholder'\n    };\n    _this.serviceAccountEmail = options.serviceAccountEmail || 'default';\n    return _this;\n  }\n  /**\n   * Indicates whether the credential requires scopes to be created by calling\n   * createdScoped before use.\n   * @deprecated\n   * @return Boolean indicating if scope is required.\n   */\n\n\n  _createClass(Compute, [{\n    key: \"createScopedRequired\",\n    value: function createScopedRequired() {\n      // On compute engine, scopes are specified at the compute instance's\n      // creation time, and cannot be changed. For this reason, always return\n      // false.\n      messages.warn(messages.COMPUTE_CREATE_SCOPED_DEPRECATED);\n      return false;\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken Unused parameter\n     */\n\n  }, {\n    key: \"refreshTokenNoCache\",\n    value: function refreshTokenNoCache(refreshToken) {\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var tokenPath, res, tokens;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                tokenPath = \"service-accounts/\".concat(this.serviceAccountEmail, \"/token\");\n                _context.prev = 1;\n                _context.next = 4;\n                return gcpMetadata.instance(tokenPath);\n\n              case 4:\n                res = _context.sent;\n                _context.next = 11;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](1);\n                _context.t0.message = 'Could not refresh access token.';\n                throw _context.t0;\n\n              case 11:\n                tokens = res.data;\n\n                if (res.data && res.data.expires_in) {\n                  tokens.expiry_date = new Date().getTime() + res.data.expires_in * 1000;\n                  delete tokens.expires_in;\n                }\n\n                this.emit('tokens', tokens);\n                return _context.abrupt(\"return\", {\n                  tokens: tokens,\n                  res: res\n                });\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 7]]);\n      }));\n    }\n  }, {\n    key: \"requestAsync\",\n    value: function requestAsync(opts) {\n      var retry = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return _get(_getPrototypeOf(Compute.prototype), \"requestAsync\", this).call(this, opts, retry).catch(function (e) {\n        var res = e.response;\n\n        if (res && res.status) {\n          var helpfulMessage = null;\n\n          if (res.status === 403) {\n            helpfulMessage = 'A Forbidden error was returned while attempting to retrieve an access ' + 'token for the Compute Engine built-in service account. This may be because the Compute ' + 'Engine instance does not have the correct permission scopes specified.';\n          } else if (res.status === 404) {\n            helpfulMessage = 'A Not Found error was returned while attempting to retrieve an access' + 'token for the Compute Engine built-in service account. This may be because the Compute ' + 'Engine instance does not have any permission scopes specified.';\n          }\n\n          if (helpfulMessage) {\n            if (e && e.message && !retry) {\n              helpfulMessage += ' ' + e.message;\n            }\n\n            if (e) {\n              e.message = helpfulMessage;\n            } else {\n              e = new Error(helpfulMessage);\n              e.code = res.status.toString();\n            }\n          }\n        }\n\n        throw e;\n      });\n    }\n  }]);\n\n  return Compute;\n}(oauth2client_1.OAuth2Client);\n\nexports.Compute = Compute;","map":null,"metadata":{},"sourceType":"script"}