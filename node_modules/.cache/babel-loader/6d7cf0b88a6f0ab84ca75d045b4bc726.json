{"ast":null,"code":"'use strict';\n\nrequire('./patch-core');\n\nvar inherits = require('util').inherits;\n\nvar promisify = require('es6-promisify');\n\nvar EventEmitter = require('events').EventEmitter;\n\nmodule.exports = Agent;\n\nfunction isAgent(v) {\n  return v && typeof v.addRequest === 'function';\n}\n/**\n * Base `http.Agent` implementation.\n * No pooling/keep-alive is implemented by default.\n *\n * @param {Function} callback\n * @api public\n */\n\n\nfunction Agent(callback, _opts) {\n  if (!(this instanceof Agent)) {\n    return new Agent(callback, _opts);\n  }\n\n  EventEmitter.call(this); // The callback gets promisified if it has 3 parameters\n  // (i.e. it has a callback function) lazily\n\n  this._promisifiedCallback = false;\n  var opts = _opts;\n\n  if ('function' === typeof callback) {\n    this.callback = callback;\n  } else if (callback) {\n    opts = callback;\n  } // timeout for the socket to be returned from the callback\n\n\n  this.timeout = opts && opts.timeout || null;\n  this.options = opts;\n}\n\ninherits(Agent, EventEmitter);\n/**\n * Override this function in your subclass!\n */\n\nAgent.prototype.callback = function callback(req, opts) {\n  throw new Error('\"agent-base\" has no default implementation, you must subclass and override `callback()`');\n};\n/**\n * Called by node-core's \"_http_client.js\" module when creating\n * a new HTTP request with this Agent instance.\n *\n * @api public\n */\n\n\nAgent.prototype.addRequest = function addRequest(req, _opts) {\n  var ownOpts = Object.assign({}, _opts); // Set default `host` for HTTP to localhost\n\n  if (null == ownOpts.host) {\n    ownOpts.host = 'localhost';\n  } // Set default `port` for HTTP if none was explicitly specified\n\n\n  if (null == ownOpts.port) {\n    ownOpts.port = ownOpts.secureEndpoint ? 443 : 80;\n  }\n\n  var opts = Object.assign({}, this.options, ownOpts);\n\n  if (opts.host && opts.path) {\n    // If both a `host` and `path` are specified then it's most likely the\n    // result of a `url.parse()` call... we need to remove the `path` portion so\n    // that `net.connect()` doesn't attempt to open that as a unix socket file.\n    delete opts.path;\n  }\n\n  delete opts.agent;\n  delete opts.hostname;\n  delete opts._defaultAgent;\n  delete opts.defaultPort;\n  delete opts.createConnection; // Hint to use \"Connection: close\"\n  // XXX: non-documented `http` module API :(\n\n  req._last = true;\n  req.shouldKeepAlive = false; // Create the `stream.Duplex` instance\n\n  var timeout;\n  var timedOut = false;\n  var timeoutMs = this.timeout;\n  var freeSocket = this.freeSocket;\n\n  function onerror(err) {\n    if (req._hadError) return;\n    req.emit('error', err); // For Safety. Some additional errors might fire later on\n    // and we need to make sure we don't double-fire the error event.\n\n    req._hadError = true;\n  }\n\n  function ontimeout() {\n    timeout = null;\n    timedOut = true;\n    var err = new Error('A \"socket\" was not created for HTTP request before ' + timeoutMs + 'ms');\n    err.code = 'ETIMEOUT';\n    onerror(err);\n  }\n\n  function callbackError(err) {\n    if (timedOut) return;\n\n    if (timeout != null) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n\n    onerror(err);\n  }\n\n  function onsocket(socket) {\n    if (timedOut) return;\n\n    if (timeout != null) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n\n    if (isAgent(socket)) {\n      // `socket` is actually an http.Agent instance, so relinquish\n      // responsibility for this `req` to the Agent from here on\n      socket.addRequest(req, opts);\n    } else if (socket) {\n      var onfree = function onfree() {\n        freeSocket(socket, opts);\n      };\n\n      socket.on('free', onfree);\n      req.onSocket(socket);\n    } else {\n      var err = new Error('no Duplex stream was returned to agent-base for `' + req.method + ' ' + req.path + '`');\n      onerror(err);\n    }\n  }\n\n  if (!this._promisifiedCallback && this.callback.length >= 3) {\n    // Legacy callback function - convert to a Promise\n    this.callback = promisify(this.callback, this);\n    this._promisifiedCallback = true;\n  }\n\n  if (timeoutMs > 0) {\n    timeout = setTimeout(ontimeout, timeoutMs);\n  }\n\n  try {\n    Promise.resolve(this.callback(req, opts)).then(onsocket, callbackError);\n  } catch (err) {\n    Promise.reject(err).catch(callbackError);\n  }\n};\n\nAgent.prototype.freeSocket = function freeSocket(socket, opts) {\n  // TODO reuse sockets\n  socket.destroy();\n};","map":null,"metadata":{},"sourceType":"script"}