{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2013 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _regeneratorRuntime = require(\"/home/sunnyd/Desktop/Weather App/subtube/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/home/sunnyd/Desktop/Weather App/subtube/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/sunnyd/Desktop/Weather App/subtube/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/sunnyd/Desktop/Weather App/subtube/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/sunnyd/Desktop/Weather App/subtube/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/home/sunnyd/Desktop/Weather App/subtube/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/home/sunnyd/Desktop/Weather App/subtube/node_modules/@babel/runtime/helpers/inherits\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar gtoken_1 = require(\"gtoken\");\n\nvar messages = require(\"../messages\");\n\nvar jwtaccess_1 = require(\"./jwtaccess\");\n\nvar oauth2client_1 = require(\"./oauth2client\");\n\nvar JWT =\n/*#__PURE__*/\nfunction (_oauth2client_1$OAuth) {\n  _inherits(JWT, _oauth2client_1$OAuth);\n\n  function JWT(optionsOrEmail, keyFile, key, scopes, subject, keyId) {\n    var _this;\n\n    _classCallCheck(this, JWT);\n\n    var opts = optionsOrEmail && typeof optionsOrEmail === 'object' ? optionsOrEmail : {\n      email: optionsOrEmail,\n      keyFile: keyFile,\n      key: key,\n      keyId: keyId,\n      scopes: scopes,\n      subject: subject\n    };\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(JWT).call(this, {\n      eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis\n    }));\n    _this.email = opts.email;\n    _this.keyFile = opts.keyFile;\n    _this.key = opts.key;\n    _this.keyId = opts.keyId;\n    _this.scopes = opts.scopes;\n    _this.subject = opts.subject;\n    _this.additionalClaims = opts.additionalClaims;\n    _this.credentials = {\n      refresh_token: 'jwt-placeholder',\n      expiry_date: 1\n    };\n    return _this;\n  }\n  /**\n   * Creates a copy of the credential with the specified scopes.\n   * @param scopes List of requested scopes or a single scope.\n   * @return The cloned instance.\n   */\n\n\n  _createClass(JWT, [{\n    key: \"createScoped\",\n    value: function createScoped(scopes) {\n      return new JWT({\n        email: this.email,\n        keyFile: this.keyFile,\n        key: this.key,\n        keyId: this.keyId,\n        scopes: scopes,\n        subject: this.subject,\n        additionalClaims: this.additionalClaims\n      });\n    }\n    /**\n     * Obtains the metadata to be sent with the request.\n     *\n     * @param url the URI being authorized.\n     */\n\n  }, {\n    key: \"getRequestMetadataAsync\",\n    value: function getRequestMetadataAsync(url) {\n      var _this2 = this;\n\n      var _super = Object.create(null, {\n        getRequestMetadataAsync: {\n          get: function get() {\n            return _get(_getPrototypeOf(JWT.prototype), \"getRequestMetadataAsync\", _this2);\n          }\n        }\n      });\n\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _ref, tokens, headers;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(!this.apiKey && !this.hasScopes() && url)) {\n                  _context.next = 16;\n                  break;\n                }\n\n                if (!(this.additionalClaims && this.additionalClaims.target_audience)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 4;\n                return this.refreshToken();\n\n              case 4:\n                _ref = _context.sent;\n                tokens = _ref.tokens;\n                return _context.abrupt(\"return\", {\n                  headers: {\n                    Authorization: \"Bearer \".concat(tokens.id_token)\n                  }\n                });\n\n              case 9:\n                // no scopes have been set, but a uri has been provided. Use JWTAccess\n                // credentials.\n                if (!this.access) {\n                  this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId);\n                }\n\n                _context.next = 12;\n                return this.access.getRequestHeaders(url, this.additionalClaims);\n\n              case 12:\n                headers = _context.sent;\n                return _context.abrupt(\"return\", {\n                  headers: headers\n                });\n\n              case 14:\n                _context.next = 17;\n                break;\n\n              case 16:\n                return _context.abrupt(\"return\", _super.getRequestMetadataAsync.call(this, url));\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Indicates whether the credential requires scopes to be created by calling\n     * createScoped before use.\n     * @deprecated\n     * @return false if createScoped does not need to be called.\n     */\n\n  }, {\n    key: \"createScopedRequired\",\n    value: function createScopedRequired() {\n      messages.warn(messages.JWT_CREATE_SCOPED_DEPRECATED);\n      return !this.hasScopes();\n    }\n    /**\n     * Determine if there are currently scopes available.\n     */\n\n  }, {\n    key: \"hasScopes\",\n    value: function hasScopes() {\n      if (!this.scopes) {\n        return false;\n      } // For arrays, check the array length.\n\n\n      if (this.scopes instanceof Array) {\n        return this.scopes.length > 0;\n      } // For others, convert to a string and check the length.\n\n\n      return String(this.scopes).length > 0;\n    }\n  }, {\n    key: \"authorize\",\n    value: function authorize(callback) {\n      if (callback) {\n        this.authorizeAsync().then(function (r) {\n          return callback(null, r);\n        }, callback);\n      } else {\n        return this.authorizeAsync();\n      }\n    }\n  }, {\n    key: \"authorizeAsync\",\n    value: function authorizeAsync() {\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.refreshToken();\n\n              case 2:\n                result = _context2.sent;\n\n                if (result) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                throw new Error('No result returned');\n\n              case 5:\n                this.credentials = result.tokens;\n                this.credentials.refresh_token = 'jwt-placeholder';\n                this.key = this.gtoken.key;\n                this.email = this.gtoken.iss;\n                return _context2.abrupt(\"return\", result.tokens);\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken ignored\n     * @private\n     */\n\n  }, {\n    key: \"refreshTokenNoCache\",\n    value: function refreshTokenNoCache(refreshToken) {\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var gtoken, token, tokens;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                gtoken = this.createGToken();\n                _context3.next = 3;\n                return gtoken.getToken();\n\n              case 3:\n                token = _context3.sent;\n                tokens = {\n                  access_token: token,\n                  token_type: 'Bearer',\n                  expiry_date: gtoken.expiresAt,\n                  // tslint:disable-next-line no-any\n                  id_token: gtoken.rawToken.id_token\n                };\n                this.emit('tokens', tokens);\n                return _context3.abrupt(\"return\", {\n                  res: null,\n                  tokens: tokens\n                });\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n    /**\n     * Create a gToken if it doesn't already exist.\n     */\n\n  }, {\n    key: \"createGToken\",\n    value: function createGToken() {\n      if (!this.gtoken) {\n        this.gtoken = new gtoken_1.GoogleToken({\n          iss: this.email,\n          sub: this.subject,\n          scope: this.scopes,\n          keyFile: this.keyFile,\n          key: this.key,\n          additionalClaims: this.additionalClaims\n        });\n      }\n\n      return this.gtoken;\n    }\n    /**\n     * Create a JWT credentials instance using the given input options.\n     * @param json The input object.\n     */\n\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      if (!json) {\n        throw new Error('Must pass in a JSON object containing the service account auth settings.');\n      }\n\n      if (!json.client_email) {\n        throw new Error('The incoming JSON object does not contain a client_email field');\n      }\n\n      if (!json.private_key) {\n        throw new Error('The incoming JSON object does not contain a private_key field');\n      } // Extract the relevant information from the json key file.\n\n\n      this.email = json.client_email;\n      this.key = json.private_key;\n      this.keyId = json.private_key_id;\n      this.projectId = json.project_id;\n    }\n  }, {\n    key: \"fromStream\",\n    value: function fromStream(inputStream, callback) {\n      if (callback) {\n        this.fromStreamAsync(inputStream).then(function (r) {\n          return callback();\n        }, callback);\n      } else {\n        return this.fromStreamAsync(inputStream);\n      }\n    }\n  }, {\n    key: \"fromStreamAsync\",\n    value: function fromStreamAsync(inputStream) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!inputStream) {\n          throw new Error('Must pass in a stream containing the service account auth settings.');\n        }\n\n        var s = '';\n        inputStream.setEncoding('utf8').on('error', reject).on('data', function (chunk) {\n          return s += chunk;\n        }).on('end', function () {\n          try {\n            var data = JSON.parse(s);\n\n            _this3.fromJSON(data);\n\n            resolve();\n          } catch (e) {\n            reject(e);\n          }\n        });\n      });\n    }\n    /**\n     * Creates a JWT credentials instance using an API Key for authentication.\n     * @param apiKey The API Key in string form.\n     */\n\n  }, {\n    key: \"fromAPIKey\",\n    value: function fromAPIKey(apiKey) {\n      if (typeof apiKey !== 'string') {\n        throw new Error('Must provide an API Key string.');\n      }\n\n      this.apiKey = apiKey;\n    }\n    /**\n     * Using the key or keyFile on the JWT client, obtain an object that contains\n     * the key and the client email.\n     */\n\n  }, {\n    key: \"getCredentials\",\n    value: function getCredentials() {\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var gtoken, creds;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!this.key) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", {\n                  private_key: this.key,\n                  client_email: this.email\n                });\n\n              case 4:\n                if (!this.keyFile) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                gtoken = this.createGToken();\n                _context4.next = 8;\n                return gtoken.getCredentials(this.keyFile);\n\n              case 8:\n                creds = _context4.sent;\n                return _context4.abrupt(\"return\", {\n                  private_key: creds.privateKey,\n                  client_email: creds.clientEmail\n                });\n\n              case 10:\n                throw new Error('A key or a keyFile must be provided to getCredentials.');\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }]);\n\n  return JWT;\n}(oauth2client_1.OAuth2Client);\n\nexports.JWT = JWT;","map":null,"metadata":{},"sourceType":"script"}