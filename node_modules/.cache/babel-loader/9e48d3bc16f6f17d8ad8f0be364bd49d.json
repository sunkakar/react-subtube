{"ast":null,"code":"\"use strict\"; // Copyright 2018, Google, LLC.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _slicedToArray = require(\"/home/sunnyd/Desktop/Weather App/subtube/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _regeneratorRuntime = require(\"/home/sunnyd/Desktop/Weather App/subtube/node_modules/@babel/runtime/regenerator\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction getRetryConfig(err) {\n  return __awaiter(this, void 0, void 0,\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var config, retryRanges, shouldRetryFn, delay, backoff;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            config = getConfig(err);\n\n            if (!(!err || !err.config || !config && !err.config.retry)) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              shouldRetry: false\n            });\n\n          case 3:\n            config = config || {};\n            config.currentRetryAttempt = config.currentRetryAttempt || 0;\n            config.retry = config.retry === undefined || config.retry === null ? 3 : config.retry;\n            config.retryDelay = config.retryDelay || 100;\n            config.httpMethodsToRetry = config.httpMethodsToRetry || ['GET', 'HEAD', 'PUT', 'OPTIONS', 'DELETE'];\n            config.noResponseRetries = config.noResponseRetries === undefined || config.noResponseRetries === null ? 2 : config.noResponseRetries; // If this wasn't in the list of status codes where we want\n            // to automatically retry, return.\n\n            retryRanges = [// https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n            // 1xx - Retry (Informational, request still processing)\n            // 2xx - Do not retry (Success)\n            // 3xx - Do not retry (Redirect)\n            // 4xx - Do not retry (Client errors)\n            // 429 - Retry (\"Too Many Requests\")\n            // 5xx - Retry (Server errors)\n            [100, 199], [429, 429], [500, 599]];\n            config.statusCodesToRetry = config.statusCodesToRetry || retryRanges; // Put the config back into the err\n\n            err.config.retryConfig = config; // Determine if we should retry the request\n\n            shouldRetryFn = config.shouldRetry || shouldRetryRequest;\n\n            if (shouldRetryFn(err)) {\n              _context.next = 15;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              shouldRetry: false,\n              config: err.config\n            });\n\n          case 15:\n            // Calculate time to wait with exponential backoff.\n            // Formula: (2^c - 1 / 2) * 1000\n            delay = (Math.pow(2, config.currentRetryAttempt) - 1) / 2 * 1000; // We're going to retry!  Incremenent the counter.\n\n            err.config.retryConfig.currentRetryAttempt += 1; // Create a promise that invokes the retry after the backOffDelay\n\n            backoff = new Promise(function (resolve) {\n              setTimeout(resolve, delay);\n            }); // Notify the user if they added an `onRetryAttempt` handler\n\n            if (config.onRetryAttempt) {\n              config.onRetryAttempt(err);\n            } // Return the promise in which recalls Gaxios to retry the request\n\n\n            _context.next = 21;\n            return backoff;\n\n          case 21:\n            return _context.abrupt(\"return\", {\n              shouldRetry: true,\n              config: err.config\n            });\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n}\n\nexports.getRetryConfig = getRetryConfig;\n/**\n * Determine based on config if we should retry the request.\n * @param err The GaxiosError passed to the interceptor.\n */\n\nfunction shouldRetryRequest(err) {\n  var config = getConfig(err); // If there's no config, or retries are disabled, return.\n\n  if (!config || config.retry === 0) {\n    return false;\n  } // Check if this error has no response (ETIMEDOUT, ENOTFOUND, etc)\n\n\n  if (!err.response && (config.currentRetryAttempt || 0) >= config.noResponseRetries) {\n    return false;\n  } // Only retry with configured HttpMethods.\n\n\n  if (!err.config.method || config.httpMethodsToRetry.indexOf(err.config.method.toUpperCase()) < 0) {\n    return false;\n  } // If this wasn't in the list of status codes where we want\n  // to automatically retry, return.\n\n\n  if (err.response && err.response.status) {\n    var isInRange = false;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = config.statusCodesToRetry[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var _step$value = _slicedToArray(_step.value, 2),\n            min = _step$value[0],\n            max = _step$value[1];\n\n        var status = err.response.status;\n\n        if (status >= min && status <= max) {\n          isInRange = true;\n          break;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    if (!isInRange) {\n      return false;\n    }\n  } // If we are out of retry attempts, return\n\n\n  config.currentRetryAttempt = config.currentRetryAttempt || 0;\n\n  if (config.currentRetryAttempt >= config.retry) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Acquire the raxConfig object from an GaxiosError if available.\n * @param err The Gaxios error with a config object.\n */\n\n\nfunction getConfig(err) {\n  if (err && err.config && err.config.retryConfig) {\n    return err.config.retryConfig;\n  }\n\n  return;\n}","map":null,"metadata":{},"sourceType":"script"}